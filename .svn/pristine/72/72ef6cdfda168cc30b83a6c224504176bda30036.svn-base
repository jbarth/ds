package com.ubs.gtp.data.resource.atics;

import com.google.common.io.ByteStreams;
import com.google.common.io.CharStreams;
import com.google.common.io.OutputSupplier;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.client.ClientHttpRequest;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.stereotype.Controller;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RequestCallback;
import org.springframework.web.client.ResponseExtractor;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.util.UriComponentsBuilder;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * This class is the controller for allowing connections to the analytics
 * service
 *
 * @author Joshua.Barth
 * @author Jakub D Kozlowski
 * @since v0.4
 */
@Controller
@Transactional
@Repository
public class AticsController {

    private static final Logger LOG = Logger.getLogger(AticsController.class.getName());

    private static final String HOST = "oracle.gtp.local";

    private static final int PORT = 8080;

    private static final String ROOT = "atics";

    private static final String ACCESS = "s";

    @RequestMapping(value = "/atics/optportfolio/{type}", method = RequestMethod.GET)
    public HttpEntity<byte[]> getOptPortfolio(final WebRequest webRequest,
                                              final @RequestHeader HttpHeaders headers,
                                              final @PathVariable String type,
                                              final UriComponentsBuilder builder,
                                              final HttpServletResponse reply) {

        final RestTemplate template = new RestTemplate();

        UriComponentsBuilder uri = builder.host(HOST).port(PORT).replacePath("").pathSegment(ROOT, ACCESS, "optportfolio", type);
        for (Map.Entry<String, String[]> e : webRequest.getParameterMap().entrySet()) {
            uri = uri.queryParam(e.getKey(), e.getValue());
        }
        final URI absolutePath = uri.build().toUri();

        final HttpEntity<byte[]> response = template.execute(absolutePath, HttpMethod.GET, new RequestCallback() {
                    public void doWithRequest(final ClientHttpRequest request) throws IOException {
                        request.getHeaders().putAll(headers);
                    }
                }, new ResponseExtractor<HttpEntity<byte[]>>() {
                    public HttpEntity<byte[]> extractData(final ClientHttpResponse response) throws IOException {
                        reply.setStatus(response.getRawStatusCode());
                        return new HttpEntity<byte[]>(ByteStreams.toByteArray(response.getBody()), response.getHeaders());
                    }
                }
        );

        for (final Map.Entry<String, List<String>> e : response.getHeaders().entrySet()) {
            for (final String value : e.getValue()) {
                reply.setHeader(e.getKey(), value);
            }
        }

        return response;
    }

    @RequestMapping(value = "/atics/calcrisk", method = RequestMethod.POST)
    public HttpEntity<byte[]> getCalcRisk(final WebRequest webRequest,
                                          final @RequestHeader HttpHeaders headers,
                                          final HttpEntity<byte[]> requestEntity,
                                          final UriComponentsBuilder builder,
                                          final HttpServletResponse reply) {

        final RestTemplate template = new RestTemplate();

        UriComponentsBuilder uri = builder.host(HOST).port(PORT).replacePath("").pathSegment(ROOT, ACCESS, "calcrisk");
        for (Map.Entry<String, String[]> e : webRequest.getParameterMap().entrySet()) {
            uri = uri.queryParam(e.getKey(), e.getValue());
        }
        final URI absolutePath = uri.build().toUri();

        final HttpEntity<byte[]> response = template.execute(absolutePath, HttpMethod.POST, new RequestCallback() {
                    public void doWithRequest(final ClientHttpRequest request) throws IOException {
                        ByteStreams.write(requestEntity.getBody(), new OutputSupplier<OutputStream>() {
                            public OutputStream getOutput() throws IOException {
                                return request.getBody();
                            }
                        });
                        request.getHeaders().putAll(headers);
                    }
                }, new ResponseExtractor<HttpEntity<byte[]>>() {
                    public HttpEntity<byte[]> extractData(final ClientHttpResponse response) throws IOException {
                        reply.setStatus(response.getRawStatusCode());
                        return new HttpEntity<byte[]>(ByteStreams.toByteArray(response.getBody()), response.getHeaders());
                    }
                }
        );

        for (final Map.Entry<String, List<String>> e : response.getHeaders().entrySet()) {
            for (final String value : e.getValue()) {
                reply.setHeader(e.getKey(), value);
            }
        }

        return response;
    }
}




