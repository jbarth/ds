package com.ubs.gtp.data.security.resource;

import com.ubs.gtp.security.AuthenticationException;
import com.ubs.gtp.security.AuthenticationManager;
import com.ubs.gtp.security.SessionManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

/**
 * Controller for authentication.
 * 
 * @author Willy Lai
 * @since 0.1
 */
@Controller
@RequestMapping(value = "/auth")
public class AuthenticationController {
	
	private static final transient Logger LOG = LoggerFactory.getLogger(AuthenticationController.class);
	
	@Autowired
	private AuthenticationManager authenticationManager;
	
	@Autowired
	private SessionManager sessionManager;
	
	/**
	 * Validates the passed credentials and returns a token when credentials are
	 * valid. Otherwise returns a authentication failed object.
	 * 
	 * @return sessionToken.
	 */
	@RequestMapping(value = "/login/client", method = RequestMethod.GET)
	@ResponseBody
	public Token authenticateClientDebug(@RequestParam String username, @RequestParam String password, @RequestParam String pin) {
		Token token = null;
		try {
			token = new Token(authenticationManager.authenticateClient(username, password, pin));
		} catch (AuthenticationException e) {
			token = new Token("Authentication failed.");
		}
		return token;
	}
	
	/**
	 * Validates the passed credentials and returns a token when credentials are
	 * valid. Otherwise returns a authentication failed object.
	 * 
	 * @return sessionToken.
	 */
	@RequestMapping(value = "/login/advisor", method = RequestMethod.GET)
	@ResponseBody
	public Token authenticateAdvisorDebug(@RequestParam String username, @RequestParam String password) {
		Token token = null;
		try {
			token = new Token(authenticationManager.authenticateAdvisor(username, password));
		} catch (AuthenticationException e) {
			token = new Token("Authentication failed.");
		}
		return token;
	}
	
	/**
	 * Removes the current session.
	 * Used for logout.
	 * 
	 * @return sessionToken.
	 */
	@RequestMapping(value = "/logout", method = RequestMethod.GET)
	@ResponseBody
	public String logout(@RequestParam String sessionToken) {
		if (sessionManager.removeSession(sessionToken)) {
			return "Sucessfully logged out";
		} else {
			return "";
		}
	}
	
	/**
	 * Validates the passed credentials and returns a token when credentials are
	 * valid. Otherwise returns a authentication failed object.
	 * 
	 * @return sessionToken.
	 */
	@RequestMapping(value = "/login/client", method = RequestMethod.POST, consumes = "application/json")
	@ResponseBody
	public Token authenticateClient(@RequestBody UsernamePasswordPin usernamePasswordPin) {
		Token token;
		try {
			token = new Token(authenticationManager.authenticateClient(usernamePasswordPin.getUsername(), usernamePasswordPin.getPassword(), usernamePasswordPin.getPin()));
		} catch (AuthenticationException e) {
			token = new Token("Authentication failed.");
		}
		return token;
	}
	
	/**
	 * Validates the passed credentials and returns a token when credentials are
	 * valid. Otherwise returns a authentication failed object.
	 * 
	 * @return sessionToken.
	 */
	@RequestMapping(value = "/login/advisor", method = RequestMethod.POST, consumes = "application/json")
	@ResponseBody
	public Token authenticateAdvisor(@RequestBody UsernamePassword usernamePassword) {
		Token token;
		try {
			token = new Token(authenticationManager.authenticateAdvisor(usernamePassword.getUsername(), usernamePassword.getPassword()));
		} catch (AuthenticationException e) {
			token = new Token("Authentication failed.");
		}
		return token;
	}

}
