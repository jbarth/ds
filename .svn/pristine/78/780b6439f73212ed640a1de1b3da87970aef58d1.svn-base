package com.ubs.gtp.data.resource.atics;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

/**
 * This class is the controller for allowing connections to the analytics
 * service
 * 
 * @author Joshua.Barth
 * @since v0.4
 * 
 */
@Controller
@Transactional
@Repository
public class AticsController {

	private String address = "http://oracle.gtp.local:8080/atics/s";

	/**
	 * @param type
	 * @param constr
	 * @param budget
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "atics/optportfolio/{type}", method = RequestMethod.GET)
	public void getAtics(final @PathVariable String type,
			@RequestParam(value = "constr", required = true) double constr,
			@RequestParam(value = "budget", required = true) double budget,
			HttpServletRequest request, final HttpServletResponse response) {

		/**
		 * GET /atics/optportfolio/{type}?constr=0.08&budget=1000 Type =
		 * byexpret; byvar
		 */

		try {
			URL url = new URL(address + "/optportfolio/" + type
					+ "?constr=" + constr + "&budget=" + budget);
			try {
				HttpURLConnection conn = (HttpURLConnection) url
						.openConnection();
				conn.setRequestMethod("GET");
				conn.setRequestProperty("Accept", "application/json");

				if (conn.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : "
							+ conn.getResponseCode());
				}

				BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
				String output = "";
				String totalOutput = "";
				while ((output = br.readLine()) != null) {
					totalOutput = totalOutput + output;
				}

				totalOutput = StringUtils.replace(totalOutput, "\\", "");

				response.setContentType("application/json");
				(response.getWriter()).print(totalOutput);
				response.getWriter().flush();

			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@RequestMapping(value = "atics/calcrisk", method = RequestMethod.POST)
	@ResponseBody
	public void postToAnalytics(@RequestBody final String jsonRequest,
			final HttpServletResponse servletResponse) {

		try {
						
			URL url = new URL(address + "/calcrisk");
			try {
				HttpURLConnection conn = (HttpURLConnection) url.openConnection();
				conn.setRequestMethod("POST");
				conn.setRequestProperty("Content-Type", "application/json");
				conn.setDoInput(true);
				conn.setDoOutput(true);
								
				OutputStream os = conn.getOutputStream();
				os.write(jsonRequest.getBytes());
				os.flush();
				
				if (conn.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : "
							+ conn.getResponseCode());
				}

				BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
				String output = "";
				String totalOutput = "";
				while ((output = br.readLine()) != null) {
					totalOutput = totalOutput + output;
				}

				totalOutput = StringUtils.replace(totalOutput, "\\", "");

				servletResponse.setContentType("application/json");
				(servletResponse.getWriter()).print(totalOutput);
				servletResponse.getWriter().flush();
				
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		
	}
}




